FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(PIXMAN REQUIRED pixman-1)
INCLUDE_DIRECTORIES(${PIXMAN_INCLUDE_DIRS})
LINK_DIRECTORIES(${PIXMAN_LIBRARY_DIRS})

PKG_CHECK_MODULES(FREETYPE REQUIRED freetype2)
INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
LINK_DIRECTORIES(${FREETYPE_LIBRARY_DIRS})

PKG_CHECK_MODULES(HARFBUZZ REQUIRED harfbuzz)
INCLUDE_DIRECTORIES(${HARFBUZZ_INCLUDE_DIRS})
LINK_DIRECTORIES(${HARFBUZZ_LIBRARY_DIRS})

PKG_CHECK_MODULES(FONTCONFIG REQUIRED fontconfig)
INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIRS})
LINK_DIRECTORIES(${FONTCONFIG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBPNG REQUIRED libpng)
INCLUDE_DIRECTORIES(${LIBPNG_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBPNG_LIBRARY_DIRS})

PKG_CHECK_MODULES(EXPAT REQUIRED expat)
INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIRS})
LINK_DIRECTORIES(${EXPAT_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBCURL REQUIRED libcurl)
INCLUDE_DIRECTORIES(${LIBCURL_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBCURL_LIBRARY_DIRS})

PKG_CHECK_MODULES(JSON REQUIRED json-c)
INCLUDE_DIRECTORIES(${JSON_INCLUDE_DIRS})
LINK_DIRECTORIES(${JSON_LIBRARY_DIRS})

PKG_CHECK_MODULES(UUID REQUIRED uuid)
INCLUDE_DIRECTORIES(${UUID_INCLUDE_DIRS})
LINK_DIRECTORIES(${UUID_LIBRARY_DIRS})

PKG_CHECK_MODULES(XKBCOMMON REQUIRED xkbcommon)
INCLUDE_DIRECTORIES(${XKBCOMMON_INCLUDE_DIRS})
LINK_DIRECTORIES(${XKBCOMMON_LIBRARY_DIRS})

PKG_CHECK_MODULES(GL REQUIRED gl)
INCLUDE_DIRECTORIES(${GL_INCLUDE_DIRS})
LINK_DIRECTORIES(${GL_LIBRARY_DIRS})

PKG_CHECK_MODULES(EGL REQUIRED egl)
INCLUDE_DIRECTORIES(${EGL_INCLUDE_DIRS})
LINK_DIRECTORIES(${EGL_LIBRARY_DIRS})

include_directories(
	${CMAKE_SOURCE_DIR}/asst
	${CMAKE_SOURCE_DIR}/helper
	)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS}")

add_library(nemotale SHARED
	nemotale.c
	talenode.c
	talegl.c
	talepixman.c
	)

TARGET_LINK_LIBRARIES(nemotale
	m
	jpeg
	${PIXMAN_LIBRARIES}
	${CAIRO_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
	${LIBPNG_LIBRARIES}
	${EXPAT_LIBRARIES}
	${LIBCURL_LIBRARIES}
	${JSON_LIBRARIES}
	${UUID_LIBRARIES}
	${XKBCOMMON_LIBRARIES}
	${GL_LIBRARIES}
	${EGL_LIBRARIES}
	nemoasst
	nemohelper
	)

INSTALL(TARGETS nemotale DESTINATION lib${CMAKE_LIBRARY_SUFFIX})

set(HEADER_FILES
	${CMAKE_SOURCE_DIR}/tale/nemotale.h
	${CMAKE_SOURCE_DIR}/tale/talenode.h
	${CMAKE_SOURCE_DIR}/tale/talegl.h
	${CMAKE_SOURCE_DIR}/tale/talepixman.h
	)

set(NEMOTALE_PKGCONFIG_REQUIRES "nemoasst nemohelper pixman-1 expat egl")

configure_file(
	nemotale.pc.in
	nemotale.pc
	@ONLY
	)

INSTALL(FILES ${HEADER_FILES} DESTINATION include/nemotale)
INSTALL(FILES ${CMAKE_BINARY_DIR}/tale/nemotale.pc DESTINATION lib${CMAKE_LIBRARY_SUFFIX}/pkgconfig)
